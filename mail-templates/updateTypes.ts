import path from 'path';
import { readdirSync, writeFileSync, readFileSync } from 'fs';

const __dirname = path.dirname(new URL(import.meta.url).pathname);

const mailLibPath = path.join(__dirname, '..', 'src', 'lib', 'server', 'mail.ts');

const templates = readdirSync(path.join(__dirname));

const templateNames = templates
	.filter((f) => f.endsWith('.mjml') && !f.startsWith('_'))
	.map((f) => f.replace(/\.mjml$/, ''));

console.info('Templates: \n' + templateNames.map((t) => `- ${t}`).join('\n'));

let insideGeneratedContent = false;
let newTypesInserted = false;
const declaration = `/**
 * @generated by running pnpm update-mail-templates
 * Valid email templates
 */
export type EmailTemplates = ${templateNames.map((t) => JSON.stringify(t)).join(' | ')};`;
writeFileSync(
	mailLibPath,
	readFileSync(mailLibPath, 'utf-8')
		.split('\n')
		.map((l) => {
			if (/\/\/\s*generate:EmailTemplates/.test(l)) {
				insideGeneratedContent = true;
			} else if (insideGeneratedContent) {
				if (/\/\/\s*end generate/.test(l)) {
					insideGeneratedContent = false;
				} else {
					if (newTypesInserted) {
						return '';
					}
					newTypesInserted = true;
					return declaration;
				}
			}
			return l;
		})
		.join('\n')
);
