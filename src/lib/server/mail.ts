import { dev } from '$app/environment';
import { readFileSync } from 'fs';
import Handlebars from 'handlebars';
import mjml2html from 'mjml';
import nodemailer from 'nodemailer';
import path from 'path';
import { valueOfBooleanString } from './utils';
import { log } from './logging';

// generate:EmailTemplates
/**
 * @generated by running pnpm update-mail-templates
 * Valid email templates
 */
export type EmailTemplates =
	| 'announcement'
	| 'email-changed'
	| 'password-changed'
	| 'plain'
	| 'reset-password'
	| 'validate-email';

// end generate

export const mailer = nodemailer.createTransport({
	host: process.env.MAIL_HOST,
	port: process.env.MAIL_PORT,
	secure: valueOfBooleanString(process.env.MAIL_NODEMAILER_SECURE),
	...(process.env.MAIL_USER || process.env.MAIL_PASSWORD
		? {
				auth: {
					user: process.env.MAIL_USER,
					pass: process.env.MAIL_PASS
				}
		  }
		: {})
});

export async function sendMail({
	template,
	to,
	subject,
	data
}: {
	template: EmailTemplates;
	to: string;
	subject: string;
	data: Record<string, string>;
}) {
	await log.info('send_mail', null, { to, template, subject, data });
	const computedSubject = Handlebars.compile(subject)(data);
	const layout = readFileSync('mail-templates/_layout.mjml').toString('utf-8');
	return mailer.sendMail({
		from: 'loca7@bde.enseeiht.fr',
		to,
		subject: computedSubject,
		html: mjml2html(
			Handlebars.compile(
				layout.replace(
					'%content%',
					readFileSync(path.join('mail-templates', template + '.mjml')).toString('utf-8')
				)
			)({ title: computedSubject, ...data })
		).html
	});
}
