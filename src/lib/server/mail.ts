import { dev } from '$app/environment';
import { readFileSync } from 'fs';
import Handlebars from 'handlebars';
import mjml2html from 'mjml';
import nodemailer from 'nodemailer';
import path from 'path';
import { valueOfBooleanString } from './utils';
import { log } from './logging';
import { CONTACT_EMAIL } from '$lib/constants';

// generate:EmailTemplates
/**
 * @generated by running pnpm update-mail-templates
 * Valid email templates
 */
export type EmailTemplateNameAndData =
	| { template: 'announcement'; data: { fullname: any; createAccountUrl: any } }
	| {
			template: 'appartment-edit-to-validate';
			data: {
				userFullName: any;
				userEmail: any;
				number: any;
				edits: any;
				label: any;
				diff: any;
				appartmentId: any;
				editId: any;
			};
	  }
	| {
			template: 'appartment-to-validate';
			data: { userFullName: any; userEmail: any; appartment: any; appartmentId: any };
	  }
	| { template: 'email-changed'; data: { fullname: any; newEmail: any } }
	| {
			template: 'liked-appartment-was-archived';
			data: { fullname: any; appartmentTitle: any; address: any; description: any };
	  }
	| {
			template: 'liked-appartment-was-deleted';
			data: { fullname: any; appartmentTitle: any; address: any; description: any };
	  }
	| {
			template: 'liked-appartment-was-edited';
			data: {
				fullname: any;
				number: any;
				appartmentTitle: any;
				edits: any;
				label: any;
				diff: any;
			};
	  }
	| {
			template: 'liked-appartment-was-unarchived';
			data: { fullname: any; appartmentTitle: any; address: any; description: any };
	  }
	| { template: 'password-changed'; data: { fullname: any } }
	| { template: 'plain'; data: { text: any } }
	| { template: 'reset-password'; data: { fullname: any; resetPasswordUrl: any } }
	| { template: 'validate-email'; data: { fullname: any; validateEmailUrl: any } };

// end generate

export type EmailTemplates = EmailTemplateNameAndData['template'];

export const mailer = nodemailer.createTransport({
	host: process.env.MAIL_HOST,
	port: process.env.MAIL_PORT,
	secure: valueOfBooleanString(process.env.MAIL_NODEMAILER_SECURE),
	...(process.env.MAIL_USER || process.env.MAIL_PASSWORD
		? {
				auth: {
					user: process.env.MAIL_USER,
					pass: process.env.MAIL_PASS
				}
		  }
		: {})
});

export async function sendMail({
	template,
	to,
	subject,
	data
}: {
	to: string | string[];
	subject: string;
} & EmailTemplateNameAndData) {
	if (to.length < 1) {
		await log.trace('send_mail', null, 'not sending mail since no addresses were given', {
			to,
			template,
			subject,
			data
		});
		return;
	}
	await log.info('send_mail', null, { to, template, subject, data });
	const computedSubject = Handlebars.compile(subject)(data);
	const layout = readFileSync('mail-templates/_layout.mjml').toString('utf-8');
	return mailer.sendMail({
		from: 'loca7@bde.enseeiht.fr',
		to,
		subject: computedSubject,
		html: mjml2html(
			Handlebars.compile(
				layout.replace(
					'%content%',
					readFileSync(path.join('mail-templates', template + '.mjml')).toString('utf-8')
				)
			)({ title: computedSubject, contactEmail: CONTACT_EMAIL, ...data })
		).html
	});
}
